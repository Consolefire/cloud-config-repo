
commons:
  infra:
    database:
      postgresql:
        driver-class-name: org.postgresql.Driver
        host: ${DB_HOST:localhost}
        port: ${DB_PORT:5432}
        database-name: ${DB_SERVER_NAME:neverland}
        username: ${DB_USER:peterpan}
        password: ${DB_PASSWORD:P3terP@n}
        current-schema: ${DB_SCHEMA:xpenser_user_service}
        #driver-options: 
        #  k: validate

        pool: # Connection pool for R2DBC (e.g., r2dbc-pool)
          name: PG_POOL
          max-size: 10
          initial-size: 5
          max-idle-time: 30m
          validation-query: SELECT 1
          # Other pool properties as needed


management:
  endpoints:
    web:
      exposure:
        include: "*" 

spring:
  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${JDBC_URL:jdbc:postgresql://${commons.infra.database.postgresql.host}:${commons.infra.database.postgresql.port}/${commons.infra.database.postgresql.database-name}?currentSchema=${commons.infra.database.postgresql.current-schema}}
    username: ${DB_USER}
    password: ${DB_PASSWORD}

  r2dbc: # Reactive database connection for WebFlux
    url: ${R2DBC_URL:r2dbc:postgresql://${commons.infra.database.postgresql.host}:${commons.infra.database.postgresql.port}/${commons.infra.database.postgresql.database-name}?currentSchema=${commons.infra.database.postgresql.current-schema}}
    username: ${DB_USER:peterpan}
    password: ${DB_PASSWORD:P3terP@n}
    # No driver-class-name needed for R2DBC
    pool: # Connection pool for R2DBC (e.g., r2dbc-pool)
      max-size: 10
      initial-size: 5
      max-idle-time: 30m
      validation-query: SELECT 1
      # Other pool properties as needed

  flyway: # Flyway still manages schema, even for R2DBC
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true

  security:
    oauth2:
      resourceserver:
        jwt:
          # This is crucial for your resource server.
          # Replace with the issuer URI of your Authorization Server (e.g., Keycloak, Auth0, Okta).
          # The resource server will use this to retrieve the public keys to validate JWTs.
          issuer-uri: http://localhost:9000/realms/master # Example: your Auth Server's issuer URI
          # If using an opaque token (introspection), you'd use:
          # opaquetoken:
          #   introspection-uri: http://localhost:9000/oauth2/introspect
          #   client-id: user-service-client
          #   client-secret: secret